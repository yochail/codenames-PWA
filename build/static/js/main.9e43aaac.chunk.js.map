{"version":3,"sources":["app/store.ts","GameCard.tsx","app/words-he.ts","app/boardActions.ts","app/boardSlices.ts","Board.tsx","App.tsx","serviceWorker.ts","app/appSlices.ts","index.tsx","app/appActions.ts"],"names":["EndGameCause","GameCard","state","onClick","color","isColorVisible","cardStile","width","borderWidth","height","backgroundColor","padding","margin","display","cardTextStile","fontSize","fontWeight","textDecoration","isLineThrough","textAlign","Card","className","raised","style","Typography","text","Words","o","words","forEach","w","console","log","push","createBoardCodeWord","cards","boardColor","codeWordNumber","a","positiveWords","filter","c","map","ws","negativeWords","data","number","quaryServer","endpoint","url","fetch","method","mode","credentials","headers","referrerPolicy","body","JSON","stringify","response","json","responseData","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","createBoardCodeWordThunk","createAsyncThunk","playingColor","codeNameNumber","word","Colors","getOtherColor","currentColor","InitBoard","gameType","colors","Array","fill","concat","isOperatorGameType","slice","t","i","idx","pop","boardSlice","createSlice","name","initialState","codeNameWord","steps","blueScore","redScore","isTurnEnd","endGame","reducers","initBoard","action","payload","flipCard","card","success","scoreChange","turnEnd","nextTurn","requestPending","requestFailed","requestSuccess","endGameCause","extraReducers","builder","addCase","fulfilled","pending","rejected","error","boardStyle","direction","OperatorHeader","titleStyle","FormControl","variant","InputLabel","htmlFor","OutlinedInput","id","value","label","ScoreHeader","Grid","container","background","item","xs","Badge","badgeContent","anchorOrigin","horizontal","vertical","showZero","PlayerHeader","dispatch","useDispatch","Box","LinearProgress","justify","alignItems","spacing","Button","actions","StepStepper","Stepper","activeStep","from","keys","stepLable","stepError","Step","key","StepLabel","ErrorHeader","TurnEnd","successSteps","s","Header","config","SuccessSnackBar","openSnackBar","setSnackBarOpen","lastStepSuccess","undefined","Snackbar","autoHideDuration","open","onClose","opacity","PossibleEndDialog","winner","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","newBoard","autoFocus","Board","useSelector","board","React","useState","checkGameEnd","Container","arr","len","chunks","n","chunk","row","wrap","j","CircularProgress","App","rel","href","content","AppBar","position","Toolbar","IconButton","edge","aria-label","Paper","elevation","paddingTop","paddingBottom","Boolean","window","location","hostname","match","initailAppState","configSlice","setConfig","reducer","combineReducers","store","configureStore","ReactDOM","render","document","getElementById","appConfig","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"weA+BaA,EACC,YADDA,EAEK,iB,QCWHC,EApCE,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAMC,EAA0B,EAA1BA,QAEjBC,EAAQF,EAAMG,eAAiBH,EAAME,MAAQ,QAC7CE,EAA0B,CAC9BC,MAAO,MACPC,YAAa,QACbC,OAAQ,MACRC,gBAAiBN,EACjBO,QAAS,MACTC,OAAQ,QACRC,QAAS,QAGLC,EAA8B,CAClCC,SAAU,MACVC,WAAY,SACZZ,MAAiB,UAAVA,EAAoB,QAAU,QACrCa,eAAgBf,EAAMgB,cAAgB,eAAiB,OACvDN,OAAQ,OACRO,UAAW,UAGb,OACI,kBAACC,EAAA,EAAD,CACEC,UAAU,4CACVlB,QAASA,EACTmB,QAAQ,EACRC,MAAOjB,GAEP,kBAACkB,EAAA,EAAD,CAAYD,MAAOT,GAChBZ,EAAMuB,Q,iDCrCXC,EAAQ,CACV,qBACJ,2BACA,2BACA,iCACA,iCACA,eACA,iCACA,2BACA,qBACA,6CACA,qBACA,qBACA,uCACA,2BACA,iCACA,qBACA,qBACA,2BACA,qBACA,iCACA,uCACA,iCACA,2BACA,iCACA,iCACA,iCACA,2BACA,2BACA,2BACA,iCACA,iCACA,qBACA,2BACA,2BACA,qBACA,2BACA,iCACA,2BACA,2BACA,qBACA,2BACA,uCACA,2BACA,2BACA,2BACA,2BACA,2BACA,qBACA,2BACA,2BACA,qBACA,iCACA,iCACA,2BACA,2BACA,2BACA,qBACA,2BACA,6CACA,qBACA,iCACA,iCACA,iCACA,iCACA,2BACA,qBACA,2BACA,2BACA,qBACA,qBACA,2BACA,iCACA,qBACA,eACA,2BACA,2BACA,eACA,iCACA,2BACA,eACA,qBACA,2BACA,iCACA,6CACA,qBACA,iCACA,qBACA,2BACA,iCACA,qBACA,iCACA,qBACA,qBACA,uCACA,2BACA,eACA,2BACA,qBACA,qBACA,qBACA,iCACA,qBACA,2BACA,2BACA,iCACA,uCACA,2BACA,iCACA,iCACA,iCACA,2BACA,2BACA,iCACA,iCACA,iCACA,qBACA,2BACA,qBACA,uCACA,2BACA,2BACA,2BACA,eACA,2BACA,2BACA,iCACA,2BACA,eACA,qBACA,qBACA,eACA,eACA,eACA,qBACA,2BACA,2BACA,2BACA,iCACA,2BACA,qBACA,2BACA,qBACA,qBACA,qBACA,eACA,iCACA,2BACA,qBACA,2BACA,2BACA,iCACA,qBACA,qBACA,qBACA,2BACA,2BACA,uCACA,qBACA,2BACA,2BACA,iCACA,2BACA,qBACA,qBACA,2BACA,qBACA,iCACA,2BACA,2BACA,qBACA,eACA,qBACA,2BACA,2BACA,eACA,2BACA,iCACA,eACA,iCACA,qBACA,2BACA,qBACA,2BACA,2BACA,2BACA,2BACA,eACA,qBACA,2BACA,iCACA,2BACA,2BACA,iCACA,qBACA,2BACA,qBACA,2BACA,qBACA,qBACA,eACA,qBACA,qBACA,2BACA,qBACA,qBACA,iCACA,2BACA,qBACA,eACA,iCACA,qBACA,qBACA,2BACA,iCACA,qBACA,qBACA,6CACA,qBACA,qBACA,2BACA,iCACA,qBACA,2BACA,qBACA,2BACA,qBACA,2BACA,qBACA,eACA,2BACA,qBACA,2BACA,qBACA,2BACA,qBACA,2BACA,eACA,qBACA,iCACA,2BACA,qBACA,2BACA,2BACA,2BACA,uCACA,2BACA,2BACA,qBACA,2BACA,iCACA,qBACA,qBACA,qBACA,iCACA,iCACA,iCACA,iCACA,2BACA,qBACA,qBACA,eACA,eACA,eACA,2BACA,2BACA,2BACA,uCACA,eACA,2BACA,2BACA,2BACA,qBACA,qBACA,iCACA,iCACA,6CACA,iCACA,2BACA,2BACA,uCACA,qBACA,2BACA,2BACA,2BACA,iCACA,2BACA,iCACA,qBACA,iCACA,qBACA,2BACA,uCACA,2BACA,iCACA,qBACA,qBACA,2BACA,2BACA,qBACA,iCACA,iCACA,iCACA,2BACA,uCACA,iCACA,uCACA,2BACA,2BACA,2BACA,qBACA,2BACA,iCACA,qBACA,iCACA,qBACA,iCACA,uCACA,2BACA,iCACA,6CACA,qBACA,iCACA,2BACA,qBACA,uCACA,qBACA,qBACA,uCACA,qBACA,iCACA,qBACA,qBACA,iCACA,eACA,2BACA,2BACA,eACA,qBACA,2BACA,qBACA,2BACA,uCACA,qBACA,iCACA,qBACA,iCACA,2BACA,2BACA,uCACA,iCACA,eACA,qBACA,2BACA,qBACA,iCACA,iCACA,2BACA,qBACA,2BACA,2BACA,iCACA,iCACA,iCACA,2BACA,2BACA,iCACA,qBACA,2BACA,2BACA,2BACA,qBACA,2BACA,iCACA,iCACA,2BACA,2BACA,6CACA,iCACA,qBACA,qBACA,uCACA,2BACA,qBACA,iCACA,iCACA,qBACA,iCACA,qBACA,2BACA,iCACA,iCACA,2BACA,2BACA,2BACA,qBACA,2BACA,2BACA,qBACA,qBACA,iCACA,iCACA,eACA,iCACA,iCACA,2BACA,iCACA,iCACA,2BACA,qBACA,qBACA,iCACA,2BACA,uCACA,2BACA,iCACA,qBACA,iCACA,qBACA,iCACA,iCACA,iCACA,6CACA,6CACA,qBACA,qBACA,2BACA,iCACA,2BACA,iCACA,iCACA,iCACA,mDACA,2BACA,qBACA,iCACA,qBACA,qBACA,qBACA,qBACA,2BACA,2BACA,2BACA,qBACA,eACA,qBACA,qBACA,qBACA,iCACA,iCACA,uCACA,2BACA,iCACA,qBACA,2BACA,2BACA,eACA,2BACA,qBACA,qBACA,2BACA,2BACA,2BACA,qBACA,2BACA,uCACA,iCACA,2BACA,2BACA,iCACA,qBACA,qBACA,qBACA,qBACA,qBACA,2BACA,uCACA,iCACA,2BACA,iCACA,2BACA,2BACA,qBACA,iCACA,iCACA,qBACA,iCACA,2BACA,2BACA,2BACA,2BACA,2BACA,qBACA,2BACA,2BACA,2BACA,qBACA,2BACA,eACA,iCACA,uCACA,iCACA,2BACA,uCACA,qBACA,uCACA,iCACA,uCACA,2BACA,uCACA,iCACA,iCACA,2BACA,2BACA,2BACA,qBACA,2BACA,2BACA,6CACA,iCACA,qBACA,qBACA,iCACA,2BACA,2BACA,iCACA,iCACA,iCACA,2BACA,qBACA,uCACA,2BACA,iCACA,qBACA,iCACA,iCACA,qBACA,2BACA,qBACA,2BACA,iCACA,2BACA,2BACA,2BACA,uCACA,qBACA,iCACA,qBACA,iCACA,iCACA,qBACA,2BACA,2BACA,2BACA,qBACA,2BACA,2BACA,2BACA,iCACA,iCACA,2BACA,iCACA,2BACA,2BACA,qBACA,2BACA,+DACA,2BACA,uCACA,qBACA,qBACA,6CACA,2BACA,2BACA,qBACA,2BACA,2BACA,iCACA,2BACA,iCACA,iCACA,6CACA,2BACA,6CACA,iCACA,qBACA,2BACA,2BACA,iCACA,2BACA,2BACA,2BACA,qBACA,2BACA,iCACA,qBACA,2BACA,2BACA,iCACA,uCACA,2BACA,iCACA,2BACA,qBACA,eACA,iCACA,uCACA,qBACA,iCACA,uCACA,uCACA,uCACA,2BACA,eACA,uCACA,2BACA,qBACA,iCACA,iCACA,2BACA,2BACA,2BACA,2BACA,iCACA,2BACA,2BACA,6CACA,2BACA,iCACA,iCACA,uCACA,iCACA,eACA,2BACA,2BACA,qBACA,uCACA,iCACA,qBACA,uCACA,qBACA,2BACA,eACA,uCACA,2BACA,qBACA,uCACA,iCACA,qBACA,iCACA,2BACA,iCACA,2BACA,2BACA,uCACA,iCACA,uCACA,2BACA,2BACA,uCACA,qBACA,2BACA,qBACA,qBACA,2BACA,qBACA,uCACA,qBACA,uCACA,qBACA,eACA,qBACA,uCACA,iCACA,2BACA,iCACA,2BACA,qBACA,iCACA,2BACA,iCACA,iCACA,2BACA,2BACA,iCACA,2BACA,2BACA,uCACA,eACA,2BACA,uCACA,iCACA,iCACA,2BACA,2BACA,2BACA,2BACA,iCACA,2BACA,uCACA,qBACA,mDACA,2BACA,iCACA,eACA,mDACA,iCACA,uCACA,iCACA,iCACA,qBACA,2BACA,iCACA,uCACA,2BACA,2BACA,uCACA,qBACA,2BACA,uCACA,2BACA,2BACA,iCACA,uCACA,iCACA,iCACA,2BACA,6CACA,uCACA,qBACA,iCACA,2BACA,iCACA,iCACA,iCACA,2BACA,2BACA,2BACA,uCACA,2BACA,2BACA,2BACA,2BACA,iCACA,qBACA,2BACA,2BACA,qBACA,iCACA,qBACA,qBACA,2BACA,iCACA,2BACA,6CACA,qBACA,eACA,uCACA,2BACA,iCACA,uCACA,eACA,eACA,2BACA,iCACA,2BACA,2BACA,qBACA,iCACA,iCACA,2BACA,2BACA,iCACA,2BACA,2BACA,2BACA,iCACA,2BACA,qBACA,uCACA,uCACA,2BACA,qBACA,2BACA,iCACA,2BACA,iCACA,iCACA,eACA,iCACA,iCACA,2BACA,qBACA,qBACA,iCACA,qBACA,iCACA,2BACA,2BACA,uCACA,6CACA,qBACA,2BACA,iCACA,2BACA,uCACA,2BACA,qBACA,iCACA,iCACA,iCACA,uCACA,2BACA,yDACA,uCACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,iCACA,2BACA,iCACA,iCACA,iCACA,uCACA,6CACA,2BACA,2BACA,4BAOIC,EAAe,GAEfC,EAAiB,GAErBF,EAAMG,SAAQ,SAACC,GAEHH,EAAEG,GAIFC,QAAQC,IAAIF,IAHZH,EAAEG,GAAKA,EACPF,EAAMK,KAAKH,OAMRJ,QCj0BTQ,EAAmB,uCAAG,WAAOC,EAAwBC,EAAmBC,GAAlD,mBAAAC,EAAA,6DAClBC,EAAgBJ,EAAMK,QAAO,SAAAC,GAAC,OAAIA,EAAErC,QAAUgC,GAAiC,GAAnBK,EAAEvB,iBAAuBwB,KAAI,SAAAC,GAAE,OAAIA,EAAGlB,QAClGmB,EAAgBT,EAAMK,QAAO,SAAAC,GAAC,OAAIA,EAAErC,QAAUgC,GAAiC,GAAnBK,EAAEvB,iBAAuBwB,KAAI,SAAAC,GAAE,OAAIA,EAAGlB,QAClGoB,EAAO,CACT,SAAYD,EACZ,SAAYL,EACZO,OAAQT,GANY,SASXU,EAAY,oBAAqBF,GATtB,mFAAH,0DAYnBE,EAAW,uCAAG,WAAOC,EAAkBH,GAAzB,mBAAAP,EAAA,6DACVW,EADU,UAhBE,0CAgBF,YACgBD,GADhB,S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","file":"static/js/main.9e43aaac.chunk.js","sourcesContent":["import { configureStore, ThunkAction, Action, combineReducers } from '@reduxjs/toolkit';\r\nimport { boardSlice } from './boardSlices';\r\n\r\nexport interface GameCardState {\r\n  idx?: number;\r\n  color?: string,\r\n  text: string,\r\n  isColorVisible?: boolean\r\n  isLineThrough?: boolean\r\n}\r\nexport interface PlayerStep{\r\n  word: string,\r\n  success: boolean\r\n}\r\n\r\nexport interface BoardState {\r\n  playingColor: string,\r\n  cards: GameCardState[],\r\n  codeNameWord: string,\r\n  codeNameNumber?: number,\r\n  requestPending?: boolean,\r\n  requestFailed?: boolean,\r\n  requestSuccess?: boolean,\r\n  steps: PlayerStep[],\r\n  redScore:number,\r\n  blueScore:number,\r\n  isTurnEnd:boolean,\r\n  endGame:boolean,\r\n  endGameCause?:string\r\n}\r\n\r\nexport const EndGameCause = {\r\n  BlackCard : \"BlackCard\",\r\n  AllCardsTurned: \"AllCardsTurned\",\r\n}\r\n\r\nexport const GAME_TYPE_PLAYER = 'PLAYER';\r\nexport const GAME_TYPE_OPERATOR = 'OPERATOR';\r\nexport interface AppConfig{\r\n  gameType:string\r\n}\r\n\r\nexport interface StateStore{\r\n  board?:BoardState\r\n  config:AppConfig\r\n}\r\n\r\nexport interface CodenameChallange{\r\n  word:string,\r\n  number:number\r\n}","import React, { CSSProperties } from 'react';\r\nimport { Card, Typography, Grid } from '@material-ui/core';\r\nimport { GameCardState } from './app/store';\r\ninterface GameCardProp {\r\n  state:GameCardState,\r\n  onClick: ()=>void\r\n}\r\n\r\nconst GameCard = ({state,onClick}:GameCardProp) => {\r\n  \r\n  const color = state.isColorVisible ? state.color : 'Beige'\r\n  const cardStile:CSSProperties = {\r\n    width: '18%',\r\n    borderWidth: 'thick',\r\n    height: '5vw',\r\n    backgroundColor: color,\r\n    padding: '0vw',\r\n    margin: '0.5vw',\r\n    display: 'flex'\r\n  };\r\n\r\n  const cardTextStile:CSSProperties = {\r\n    fontSize: '2vw',\r\n    fontWeight: 'bolder',\r\n    color: color === 'Beige' ? 'Black' : 'White',\r\n    textDecoration: state.isLineThrough ? 'line-through' : 'none',\r\n    margin: 'auto',\r\n    textAlign: 'center'\r\n  };\r\n\r\n  return (\r\n      <Card\r\n        className=\"align-items-center justify-content-center\"\r\n        onClick={onClick}\r\n        raised={true}\r\n        style={cardStile}\r\n      >\r\n        <Typography style={cardTextStile}>\r\n          {state.text}\r\n        </Typography>\r\n      </Card>\r\n  );\r\n}\r\n\r\nexport default GameCard;","\r\nconst Words = [\r\n    'מלך',\r\n'כיסא',\r\n'חלום',\r\n'אוניה',\r\n'תקווה',\r\n'נר',\r\n'שעווה',\r\n'חשמל',\r\n'שמש',\r\n'מאזניים',\r\n'זקן',\r\n'אדם',\r\n'מלוכלך',\r\n'ירוק',\r\n'גלבוע',\r\n'מים',\r\n'זאב',\r\n'בננה',\r\n'ספר',\r\n'טחינה',\r\n'שיניים',\r\n'חתונה',\r\n'אפור',\r\n'תוכנה',\r\n'עבודה',\r\n'מפלגה',\r\n'מפתח',\r\n'אהבה',\r\n'שלום',\r\n'מחשבה',\r\n'קוראן',\r\n'ריב',\r\n'גבוה',\r\n'נחמד',\r\n'קצר',\r\n'מספר',\r\n'סרעפת',\r\n'צומת',\r\n'ליקר',\r\n'רשע',\r\n'אלוף',\r\n'חילזון',\r\n'שחמט',\r\n'רקוב',\r\n'קשור',\r\n'פשוש',\r\n'שליט',\r\n'חטף',\r\n'סרגל',\r\n'מידה',\r\n'מטר',\r\n'מסטיק',\r\n'חומוס',\r\n'תפוח',\r\n'אדום',\r\n'כמעט',\r\n'פחד',\r\n'מגנט',\r\n'אלקטרון',\r\n'שקר',\r\n'ינשוף',\r\n'לכלוך',\r\n'חימוש',\r\n'שריקה',\r\n'סבון',\r\n'תיל',\r\n'חברה',\r\n'רדוף',\r\n'רוח',\r\n'מקש',\r\n'שקוף',\r\n'לימוד',\r\n'עין',\r\n'נס',\r\n'זרוק',\r\n'קרוב',\r\n'גב',\r\n'גבינה',\r\n'קרקס',\r\n'זן',\r\n'פיל',\r\n'פליט',\r\n'צירוף',\r\n'רדיאטור',\r\n'פעם',\r\n'תמונה',\r\n'קטר',\r\n'חודר',\r\n'גמילה',\r\n'לול',\r\n'לימון',\r\n'פעל',\r\n'צדק',\r\n'קודקוד',\r\n'רשום',\r\n'חג',\r\n'גומי',\r\n'חזן',\r\n'גרב',\r\n'ערב',\r\n'שולחן',\r\n'טעם',\r\n'ספרד',\r\n'שדרה',\r\n'מסכים',\r\n'שבועות',\r\n'תכלת',\r\n'זרנוק',\r\n'ביצוע',\r\n'מרגמה',\r\n'עכבר',\r\n'חתול',\r\n'סליחה',\r\n'קשקוש',\r\n'ברווז',\r\n'שקל',\r\n'בלוז',\r\n'ורד',\r\n'תרנגול',\r\n'קורא',\r\n'לחוץ',\r\n'צלחת',\r\n'שי',\r\n'רכוש',\r\n'שליח',\r\n'מנורה',\r\n'מגבת',\r\n'חם',\r\n'שטן',\r\n'גדי',\r\n'בר',\r\n'שר',\r\n'זז',\r\n'חסה',\r\n'פינה',\r\n'רדיו',\r\n'רטוב',\r\n'שעמום',\r\n'סמיך',\r\n'דיו',\r\n'פלפל',\r\n'זנב',\r\n'שני',\r\n'פלא',\r\n'כס',\r\n'פיתוי',\r\n'פרסה',\r\n'רכס',\r\n'אטום',\r\n'שמים',\r\n'קריצה',\r\n'צלם',\r\n'קרא',\r\n'קלח',\r\n'חרוב',\r\n'אדמה',\r\n'דולפין',\r\n'חתם',\r\n'סוכר',\r\n'אקדח',\r\n'יהלום',\r\n'ברית',\r\n'בגט',\r\n'גדר',\r\n'פרפר',\r\n'לחם',\r\n'סרדין',\r\n'כריש',\r\n'כביש',\r\n'גשם',\r\n'רע',\r\n'חטא',\r\n'אסון',\r\n'נביא',\r\n'צב',\r\n'פיצה',\r\n'פטריה',\r\n'רב',\r\n'חיתול',\r\n'לקח',\r\n'ציור',\r\n'שמן',\r\n'חרטה',\r\n'גלגל',\r\n'פאזל',\r\n'חטיף',\r\n'שק',\r\n'אלה',\r\n'נולד',\r\n'מדינה',\r\n'שיחה',\r\n'אולם',\r\n'עקבות',\r\n'מאה',\r\n'מקום',\r\n'בני',\r\n'אחרי',\r\n'יום',\r\n'ערך',\r\n'לא',\r\n'בעל',\r\n'זמן',\r\n'עצמו',\r\n'היה',\r\n'בשל',\r\n'שנייה',\r\n'בדרך',\r\n'מנת',\r\n'לה',\r\n'ישראל',\r\n'ראש',\r\n'משל',\r\n'שנות',\r\n'ארצות',\r\n'דרך',\r\n'רוב',\r\n'באמצעות',\r\n'תחת',\r\n'כאן',\r\n'עולם',\r\n'אפשרי',\r\n'שיש',\r\n'צריך',\r\n'השם',\r\n'חיים',\r\n'הרב',\r\n'בעלי',\r\n'דוד',\r\n'מי',\r\n'ולכן',\r\n'שלה',\r\n'שנים',\r\n'נגד',\r\n'בלבד',\r\n'יחד',\r\n'בעיר',\r\n'אף',\r\n'לכך',\r\n'שונות',\r\n'בבית',\r\n'להם',\r\n'בארץ',\r\n'במשך',\r\n'גדול',\r\n'המלחמה',\r\n'האדם',\r\n'בקרב',\r\n'כתב',\r\n'הרבה',\r\n'אנשים',\r\n'שמו',\r\n'תוך',\r\n'זכה',\r\n'באותה',\r\n'לעתים',\r\n'שימוש',\r\n'ערכים',\r\n'עבור',\r\n'כפי',\r\n'מרץ',\r\n'גם',\r\n'את',\r\n'דף',\r\n'עליו',\r\n'מתוך',\r\n'בידי',\r\n'נוספים',\r\n'על',\r\n'להקה',\r\n'נראה',\r\n'הארץ',\r\n'עוד',\r\n'רבה',\r\n'המשפט',\r\n'מערכת',\r\n'אוקטובר',\r\n'ממשלה',\r\n'צורה',\r\n'אזור',\r\n'ספטמבר',\r\n'סרט',\r\n'ממנו',\r\n'נוסף',\r\n'בזמן',\r\n'מיוחד',\r\n'מידע',\r\n'דצמבר',\r\n'מאז',\r\n'ינואר',\r\n'בין',\r\n'אביב',\r\n'נובמבר',\r\n'אינה',\r\n'ישנות',\r\n'רבי',\r\n'בעת',\r\n'יהיה',\r\n'לערך',\r\n'שנת',\r\n'כלומר',\r\n'עדיין',\r\n'למעשה',\r\n'שהיא',\r\n'יהודים',\r\n'החברה',\r\n'פברואר',\r\n'נכון',\r\n'נמצא',\r\n'המלך',\r\n'עבר',\r\n'לגבי',\r\n'קבוצה',\r\n'ועד',\r\n'עברית',\r\n'סוף',\r\n'לכתוב',\r\n'אוגוסט',\r\n'רעות',\r\n'אפריל',\r\n'לראשונה',\r\n'איש',\r\n'מסגרת',\r\n'תחום',\r\n'טוב',\r\n'אנגלית',\r\n'צבא',\r\n'שהם',\r\n'גרמניה',\r\n'מעל',\r\n'אלבום',\r\n'אצל',\r\n'עקב',\r\n'לעשות',\r\n'ים',\r\n'יולי',\r\n'יוני',\r\n'אי',\r\n'הפך',\r\n'במאי',\r\n'לכן',\r\n'חשוב',\r\n'ביניהם',\r\n'שכן',\r\n'יהודי',\r\n'בדף',\r\n'דוגמה',\r\n'בעוד',\r\n'ידוע',\r\n'מדינות',\r\n'כיוון',\r\n'לב',\r\n'כלי',\r\n'לאור',\r\n'לשם',\r\n'תחילת',\r\n'מאוחר',\r\n'אחרת',\r\n'שוב',\r\n'נחשב',\r\n'אולי',\r\n'יהודה',\r\n'למצוא',\r\n'שלושה',\r\n'מחדש',\r\n'קיבל',\r\n'תקופה',\r\n'חדש',\r\n'צרפת',\r\n'שהיו',\r\n'הגיע',\r\n'מאי',\r\n'אינם',\r\n'בנושא',\r\n'התחלה',\r\n'שונה',\r\n'מקור',\r\n'ירושלים',\r\n'לראות',\r\n'למה',\r\n'חבר',\r\n'אירופה',\r\n'קיים',\r\n'קשר',\r\n'לדעתי',\r\n'מישהו',\r\n'אין',\r\n'גדולה',\r\n'ככל',\r\n'נקרא',\r\n'תקופת',\r\n'נוספת',\r\n'ימים',\r\n'מותו',\r\n'כנסת',\r\n'קשה',\r\n'פחות',\r\n'חברי',\r\n'שלי',\r\n'שנה',\r\n'שלישי',\r\n'ולאחר',\r\n'תל',\r\n'בריטי',\r\n'אחרון',\r\n'דומה',\r\n'קבוצת',\r\n'יצירה',\r\n'אליו',\r\n'איך',\r\n'מדי',\r\n'לאורך',\r\n'ישנם',\r\n'תוכנית',\r\n'מבין',\r\n'כוחות',\r\n'הרי',\r\n'פעמים',\r\n'קטן',\r\n'פעולה',\r\n'יישוב',\r\n'ביולי',\r\n'אימפריה',\r\n'ראשונים',\r\n'שיר',\r\n'כזה',\r\n'אביו',\r\n'הוסיף',\r\n'נעשה',\r\n'ילדים',\r\n'ניגוד',\r\n'אוויר',\r\n'ויקיפדיה',\r\n'מעבר',\r\n'מכל',\r\n'משתמש',\r\n'כוח',\r\n'משה',\r\n'מצד',\r\n'בנו',\r\n'שלוש',\r\n'ברור',\r\n'חדשה',\r\n'גיל',\r\n'כך',\r\n'חוק',\r\n'חיל',\r\n'פרס',\r\n'יחסית',\r\n'תוצאה',\r\n'מועצות',\r\n'מונה',\r\n'קישור',\r\n'אתה',\r\n'ראשי',\r\n'עצמה',\r\n'בת',\r\n'יודע',\r\n'אני',\r\n'בתי',\r\n'יוסף',\r\n'מקרה',\r\n'מילה',\r\n'למד',\r\n'בפני',\r\n'היהודי',\r\n'מסוים',\r\n'יורק',\r\n'משחק',\r\n'שלטון',\r\n'העם',\r\n'לצד',\r\n'פרק',\r\n'ארץ',\r\n'מעט',\r\n'זכתה',\r\n'זכויות',\r\n'בעזרת',\r\n'שימש',\r\n'מהווה',\r\n'קודם',\r\n'אילו',\r\n'דבר',\r\n'אפילו',\r\n'תנועה',\r\n'אחד',\r\n'שינוי',\r\n'דיון',\r\n'נבחר',\r\n'מרכז',\r\n'תמיד',\r\n'משפט',\r\n'עיר',\r\n'צורך',\r\n'בסיס',\r\n'פשוט',\r\n'בהן',\r\n'תודה',\r\n'פה',\r\n'מופיע',\r\n'קבוצות',\r\n'עליון',\r\n'יצחק',\r\n'יהודית',\r\n'שזה',\r\n'נוספות',\r\n'ראשון',\r\n'ישראלי',\r\n'הינה',\r\n'מיליון',\r\n'הצליח',\r\n'בהתאם',\r\n'נשים',\r\n'נושא',\r\n'בסרט',\r\n'רחב',\r\n'לארץ',\r\n'הבית',\r\n'משתמשים',\r\n'ארגון',\r\n'שמה',\r\n'ליד',\r\n'קיימת',\r\n'בכלל',\r\n'חושב',\r\n'בחינה',\r\n'תהליך',\r\n'תפקיד',\r\n'צפון',\r\n'ימי',\r\n'ישירות',\r\n'מחוץ',\r\n'חדשים',\r\n'מצב',\r\n'כנראה',\r\n'הנשיא',\r\n'הזו',\r\n'עליה',\r\n'ממש',\r\n'כתוב',\r\n'תנועת',\r\n'ציין',\r\n'הפכה',\r\n'יעקב',\r\n'פעילות',\r\n'שכל',\r\n'ממשלת',\r\n'עלה',\r\n'שירים',\r\n'בהמשך',\r\n'קרב',\r\n'משהו',\r\n'דרום',\r\n'חייו',\r\n'והם',\r\n'ובין',\r\n'מאשר',\r\n'מפני',\r\n'גבוהה',\r\n'עתיקה',\r\n'בתור',\r\n'לערוך',\r\n'בשנה',\r\n'כדאי',\r\n'הבא',\r\n'משמש',\r\n'אוניברסיטה',\r\n'מאות',\r\n'חודשים',\r\n'בלי',\r\n'שום',\r\n'אחרונות',\r\n'שמות',\r\n'הללו',\r\n'עלת',\r\n'שלמה',\r\n'המים',\r\n'יכולה',\r\n'כללי',\r\n'דווקא',\r\n'דברים',\r\n'לחלוטין',\r\n'רוצה',\r\n'התוכנית',\r\n'במידה',\r\n'סוג',\r\n'ניתן',\r\n'לבית',\r\n'מלחמה',\r\n'הקרב',\r\n'השאר',\r\n'זכות',\r\n'אתם',\r\n'משנה',\r\n'מקורי',\r\n'לתת',\r\n'הקמת',\r\n'להקת',\r\n'הצבעה',\r\n'מסויים',\r\n'החוק',\r\n'אברהם',\r\n'עצמם',\r\n'דין',\r\n'עת',\r\n'לצורך',\r\n'השונים',\r\n'ראה',\r\n'בברכה',\r\n'גילגמש',\r\n'חשיבות',\r\n'גדולים',\r\n'סביב',\r\n'קו',\r\n'בתפקיד',\r\n'השפה',\r\n'דעת',\r\n'עובדה',\r\n'תיכון',\r\n'מנוע',\r\n'סדרה',\r\n'ושבי',\r\n'מבנה',\r\n'בעלות',\r\n'כדור',\r\n'יחיד',\r\n'בריטניה',\r\n'תואר',\r\n'במרכז',\r\n'הפועל',\r\n'מוזיקה',\r\n'בדיוק',\r\n'הר',\r\n'בשלב',\r\n'ממנה',\r\n'שטח',\r\n'כנסייה',\r\n'ללמוד',\r\n'טבע',\r\n'עצמאות',\r\n'חזר',\r\n'מאחר',\r\n'לך',\r\n'היחידה',\r\n'ואני',\r\n'אבן',\r\n'המתאים',\r\n'למעלה',\r\n'סדר',\r\n'נמצאת',\r\n'לבצע',\r\n'קהילה',\r\n'הוקם',\r\n'נפטר',\r\n'אפריקה',\r\n'לקרוא',\r\n'להעביר',\r\n'עשרה',\r\n'עולה',\r\n'במקביל',\r\n'אתר',\r\n'מסוג',\r\n'אור',\r\n'קצת',\r\n'חומר',\r\n'גוף',\r\n'משמעות',\r\n'שאר',\r\n'מערכות',\r\n'ידע',\r\n'חי',\r\n'רמת',\r\n'אחרונה',\r\n'גרמני',\r\n'מציע',\r\n'ציבור',\r\n'מלבד',\r\n'מזה',\r\n'מקובל',\r\n'ארבע',\r\n'מטרים',\r\n'עריכה',\r\n'המשך',\r\n'ראוי',\r\n'מספיק',\r\n'לידי',\r\n'מדוע',\r\n'חיילים',\r\n'מת',\r\n'נכתב',\r\n'אמריקה',\r\n'רפאים',\r\n'תבנית',\r\n'נשיא',\r\n'הקשר',\r\n'טרול',\r\n'רואה',\r\n'במזרח',\r\n'הגנה',\r\n'ביניים',\r\n'נהר',\r\n'רפובליקה',\r\n'קטנה',\r\n'למחוק',\r\n'יד',\r\n'היסטוריה',\r\n'מצרים',\r\n'תמונות',\r\n'מרבית',\r\n'כמובן',\r\n'מין',\r\n'בעיה',\r\n'חברות',\r\n'המכונה',\r\n'היתר',\r\n'פרסם',\r\n'ביקורת',\r\n'שדה',\r\n'מטרה',\r\n'בחירות',\r\n'כמות',\r\n'שחקן',\r\n'היטלר',\r\n'אנגליה',\r\n'משפחה',\r\n'לשעבר',\r\n'עברי',\r\n'הגדולים',\r\n'תושבים',\r\n'אנו',\r\n'ארבעה',\r\n'רומא',\r\n'לאומי',\r\n'רוסיה',\r\n'מרכזי',\r\n'מונח',\r\n'הביא',\r\n'מעמד',\r\n'נקודות',\r\n'שיחק',\r\n'המצב',\r\n'כאלה',\r\n'מטעם',\r\n'לבנון',\r\n'אמר',\r\n'קבוע',\r\n'כיצד',\r\n'עשר',\r\n'החליט',\r\n'יחס',\r\n'עבד',\r\n'צעיר',\r\n'ביטוי',\r\n'חזרה',\r\n'מדיניות',\r\n'חצי',\r\n'בא',\r\n'בתחילה',\r\n'מזרח',\r\n'הצלחה',\r\n'לאומית',\r\n'אח',\r\n'אל',\r\n'חוסר',\r\n'חלקים',\r\n'מבצע',\r\n'בניו',\r\n'עמד',\r\n'קטנים',\r\n'לעבור',\r\n'מתחת',\r\n'טובה',\r\n'מכונה',\r\n'עברה',\r\n'מפקד',\r\n'אמנם',\r\n'לחיצה',\r\n'נוצר',\r\n'חסר',\r\n'פעולות',\r\n'בראשית',\r\n'שמור',\r\n'כזו',\r\n'הסכם',\r\n'נבחרת',\r\n'אומר',\r\n'השפעה',\r\n'חדשות',\r\n'עץ',\r\n'הופיע',\r\n'עניין',\r\n'שיטת',\r\n'רקע',\r\n'שפה',\r\n'חברים',\r\n'אלף',\r\n'יכולת',\r\n'משרד',\r\n'נהוג',\r\n'איטליה',\r\n'אלכסנדר',\r\n'נשק',\r\n'מושג',\r\n'בעיות',\r\n'תורת',\r\n'קרובות',\r\n'אלפי',\r\n'נתן',\r\n'הבאים',\r\n'עכשיו',\r\n'תרבות',\r\n'יוצרים',\r\n'אשמח',\r\n'אוכלוסייה',\r\n'הנוכחי',\r\n'חיפה',\r\n'קיסר',\r\n'שעות',\r\n'ישנה',\r\n'שווה',\r\n'דמות',\r\n'כלשהו',\r\n'האתר',\r\n'לעולם',\r\n'הצבאי',\r\n'בצרפת',\r\n'החינוך',\r\n'הגרמנים',\r\n'באמת',\r\n'האלה',\r\n'ביחד'\r\n];\r\n\r\ninterface Dictionary {\r\n    [Key: string]: string;\r\n}\r\n\r\nlet o:Dictionary = {}\r\n\r\nlet words:string[] = []\r\n\r\nWords.forEach((w:string)=>\r\n    {\r\n        if(!o[w]){\r\n            o[w] = w\r\n            words.push(w)\r\n        }else{\r\n            console.log(w)\r\n        }\r\n    })\r\n  //  console.log(words.join(\"','\"))\r\nexport default Words;","import { createAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { StateStore, BoardState, GameCardState, GAME_TYPE_PLAYER, GAME_TYPE_OPERATOR, CodenameChallange } from \"./store\";\r\nimport Words from \"./words-he\";\r\n\r\n// const askCodeName = async (words:string[]) =>{\r\n//     const data = {\r\n//         words,\r\n//         text: this.inputRef.current.value,\r\n//         number: this.sliderRef.current.state.value,\r\n//     };\r\n\r\n//     if (data.text) {\r\n//         await this.quaryServer('findcodesfromwords', data);\r\n//     }\r\n// }\r\nconst codenamesHost = \"https://codenames-app.azurewebsites.net\"\r\n//const codenamesHost = \" http://127.0.0.1:5000\"\r\n//const codenamesHost = \" http://127.0.0.1:8080\"\r\n\r\nconst createBoardCodeWord = async (cards: GameCardState[], boardColor: string,codeWordNumber:number) => {\r\n    const positiveWords = cards.filter(c => c.color === boardColor && c.isLineThrough != true).map(ws => ws.text);\r\n    const negativeWords = cards.filter(c => c.color !== boardColor && c.isLineThrough != true).map(ws => ws.text);\r\n    const data = {\r\n        'negative': negativeWords,\r\n        'positive': positiveWords,\r\n        number: codeWordNumber,\r\n    };\r\n\r\n    return await quaryServer('findwordsforcodes', data);\r\n}\r\n\r\nconst quaryServer = async (endpoint: string, data: object) => {\r\n    const url = `${codenamesHost}/${endpoint}`;\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: { 'Content-Type': 'application/json' },\r\n        referrerPolicy: 'no-referrer', // no-referrer, *client\r\n        body: JSON.stringify(data),\r\n    });\r\n    const responseData = await response.json();\r\n    return responseData;\r\n}\r\n\r\n\r\nconst shuffle = (array: any[]) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n\r\n// First, create the thunk\r\nexport const createBoardCodeWordThunk = createAsyncThunk(\r\n    'board/createBoardCodeWord',\r\n    async (state:Partial<BoardState>):Promise<CodenameChallange> => {\r\n        const response = await createBoardCodeWord(state.cards!,state.playingColor!,state.codeNameNumber ?? 3)\r\n        console.log(response)\r\n        return {\r\n            word:response[0],\r\n            number:response[1].length\r\n        }\r\n    }\r\n)\r\n\r\nexport const Colors = {\r\n    Red : 'Red',\r\n    Blue : 'Blue',\r\n    Beige : 'Beige',\r\n    Black : 'Black',\r\n}\r\n\r\nexport const getOtherColor = (currentColor:string)=>{\r\n    return currentColor == Colors.Red ? Colors.Blue : Colors.Red;\r\n}\r\n\r\n\r\nexport const InitBoard = (gameType:string):Partial<BoardState> => {\r\n    let colors = Array(8).fill(Colors.Red)\r\n        .concat(Array(9).fill(Colors.Blue))\r\n        .concat(Array(7).fill(Colors.Beige))\r\n        .concat(Array(1).fill(Colors.Black));\r\n\r\n    colors = shuffle(colors);\r\n    let words = [];\r\n    words = shuffle(Words);\r\n\r\n    const isOperatorGameType = gameType === GAME_TYPE_OPERATOR;\r\n    words = words.slice(0, 25);\r\n    const wordsState = words.map((t, i) => <GameCardState>(\r\n        {\r\n            idx: i,\r\n            text: t,\r\n            color: colors.pop(),\r\n            isLineThrough: false,\r\n            isColorVisible: isOperatorGameType,\r\n        }));\r\n\r\n    return {\r\n        cards: wordsState,\r\n        playingColor: Colors.Blue\r\n    }\r\n}","import { BoardState, GameCardState, StateStore, GAME_TYPE_PLAYER, CodenameChallange } from \"./store\";\r\nimport { createSlice, PayloadAction, createAction } from \"@reduxjs/toolkit\";\r\nimport GameCard from \"../GameCard\";\r\nimport { createBoardCodeWordThunk, getOtherColor, Colors } from \"./boardActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport const initialBoardState: BoardState = {\r\n    cards: [],\r\n    playingColor: 'Blue',\r\n    codeNameWord: '',\r\n    steps: [],\r\n    blueScore: 0,\r\n    redScore: 0,\r\n    isTurnEnd:false,\r\n    endGame:false\r\n};\r\n\r\nexport const boardSlice = createSlice({\r\n    name: 'board',\r\n    initialState: initialBoardState,\r\n    reducers: {\r\n        initBoard: (state: BoardState, action: PayloadAction<Partial<BoardState>>) => {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        },\r\n        flipCard: (state: BoardState, action: PayloadAction<number>) => {\r\n            const card = state.cards[action.payload];\r\n            const success = card.color === state.playingColor\r\n            const scoreChange = success ? (state.steps.length * 2 + 1) : 0;\r\n            const turnEnd = !success || state.steps.length + 1 === state.codeNameNumber;\r\n            const blueScore = state.playingColor == Colors.Blue ? state.blueScore+scoreChange : state.blueScore\r\n            const redScore = state.playingColor == Colors.Red ? state.redScore+scoreChange : state.redScore\r\n            return {\r\n                ...state,\r\n                steps: [...state.steps, { success: success, word: card.text }],\r\n                blueScore: blueScore,\r\n                redScore: redScore,\r\n                cards: state.cards.map(c => {\r\n                    return {\r\n                        ...c,\r\n                        isColorVisible: c.idx == action.payload ? !c.isColorVisible : c.isColorVisible,\r\n                        isLineThrough: c.idx == action.payload ? !c.isLineThrough : c.isLineThrough,\r\n                    }\r\n                }),\r\n                isTurnEnd: turnEnd\r\n            }\r\n        },\r\n        nextTurn: (state: BoardState, action: PayloadAction) => {\r\n            const boardColor =getOtherColor(state.playingColor)\r\n            return {\r\n                ...state,\r\n                codeNameWord: \"\",\r\n                playingColor : boardColor,\r\n                steps: [],\r\n                isTurnEnd: false,\r\n                requestPending: false,\r\n                requestFailed: false,\r\n                requestSuccess: false\r\n            }\r\n        },\r\n        endGame: (state: BoardState, action: PayloadAction<string>) => {\r\n            return {\r\n                ...state,\r\n                endGame:true,\r\n                endGameCause:action.payload\r\n            }\r\n        }\r\n    },\r\n\r\n    extraReducers: builder => {\r\n        builder.addCase(createBoardCodeWordThunk.fulfilled, (state, action: PayloadAction<CodenameChallange>) => {\r\n            return {\r\n                ...state,\r\n                codeNameWord: action.payload.word,\r\n                codeNameNumber: action.payload.number,\r\n                requestPending: false,\r\n                requestFailed: false,\r\n                requestSuccess: true\r\n            }\r\n\r\n        }).addCase(createBoardCodeWordThunk.pending, (state, action: PayloadAction) => {\r\n            return {\r\n                ...state,\r\n                requestPending: true,\r\n                requestFailed: false,\r\n                requestSuccess: false\r\n            }\r\n        }).addCase(createBoardCodeWordThunk.rejected, (state, action) => {\r\n            console.log(action.error)\r\n            return {\r\n                ...state,\r\n                requestPending: false,\r\n                requestFailed: true,\r\n                requestSuccess: false\r\n            }\r\n        })\r\n    }\r\n\r\n})\r\n\r\n// const initialGameCardState: GameCardState = {}\r\n\r\n// export const cardSlice = createSlice({\r\n//     name: 'gameCard',\r\n//     initialState: initialGameCardState,\r\n//     reducers: {\r\n\r\n//     }\r\n// })\r\n\r\n","import React, { CSSProperties, Attributes, ReactPropTypes, SyntheticEvent } from 'react';\r\nimport { Container, Grid, Typography, Card, LinearProgress, PropTypes, CircularProgress, FormControl, OutlinedInput, InputLabel, Box, Stepper, Step, StepLabel, Button, Backdrop, Badge, Snackbar, DialogContentText, Dialog, DialogTitle, DialogContent, DialogActions } from '@material-ui/core';\r\nimport { StateStore, BoardState, GAME_TYPE_PLAYER, GAME_TYPE_OPERATOR, AppConfig, EndGameCause } from './app/store';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport GameCard from './GameCard';\r\nimport { boardSlice } from './app/boardSlices';\r\nimport { createBoardCodeWordThunk, Colors, InitBoard, getOtherColor } from './app/boardActions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\n\r\n\r\n\r\nfunction chunk(arr: any[], len: number) {\r\n  var chunks = [],\r\n    i = 0,\r\n    n = arr.length;\r\n\r\n  while (i < n) {\r\n    chunks.push(arr.slice(i, i += len));\r\n  }\r\n\r\n  return chunks;\r\n}\r\n\r\nconst boardStyle: CSSProperties = {\r\n  direction: 'rtl'\r\n};\r\n\r\n\r\ninterface boardHeaderProps {\r\n  state: BoardState,\r\n  config?: AppConfig,\r\n  openSnackBar?: boolean,\r\n  setSnackBarOpen?: (open: boolean) => void\r\n}\r\n\r\nconst OperatorHeader = ({ state }: boardHeaderProps) => {\r\n  const titleStyle: CSSProperties = {\r\n    backgroundColor: state.playingColor,\r\n    color: 'white'\r\n  };\r\n  return (<Card style={titleStyle}>\r\n    <FormControl variant=\"outlined\">\r\n      <InputLabel htmlFor=\"component-outlined\">Name</InputLabel>\r\n      <OutlinedInput id=\"component-outlined\"\r\n        value={'ddd'}\r\n        //onChange={handleChange}\r\n        label=\"Name\" />\r\n    </FormControl>\r\n  </Card>)\r\n}\r\n\r\nconst ScoreHeader = ({ state }: boardHeaderProps) => {\r\n\r\n  return (\r\n    <Grid container style={{\r\n      background: Colors.Blue,\r\n      height: '4vh'\r\n    }}>\r\n      <Grid item xs={2}>\r\n        <Badge\r\n          badgeContent={state.blueScore} color=\"primary\"\r\n          anchorOrigin={\r\n            {\r\n              horizontal: 'left',\r\n              vertical: 'bottom'\r\n            }}\r\n          showZero={true}>\r\n          <StarsIcon />\r\n        </Badge>\r\n      </Grid>\r\n      <Grid item xs={8} style={{ background: Colors.Beige }}>\r\n        <Typography variant=\"h5\" style={{ color: Colors.Black }}>\r\n          {'שם קוד'}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={2} style={{ background: Colors.Red }}>\r\n        <Badge\r\n          badgeContent={state.redScore}\r\n          color={\"error\"}\r\n          anchorOrigin={\r\n            {\r\n              horizontal: 'right',\r\n              vertical: 'bottom'\r\n            }}\r\n          showZero={true}>\r\n          <StarsIcon />\r\n        </Badge>\r\n      </Grid >\r\n    </Grid>)\r\n\r\n}\r\n\r\nconst PlayerHeader = ({ state }: boardHeaderProps) => {\r\n  const dispatch = useDispatch();\r\n  if (state.requestPending) {\r\n    return (\r\n      <Box>\r\n        <LinearProgress />\r\n      </Box>)\r\n  } else {\r\n    return (\r\n      <Grid container justify=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n      >\r\n        <Grid item xs={3}>\r\n          <Typography variant=\"h4\">\r\n            {`${state.codeNameWord} ${state.codeNameNumber}`}\r\n\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color={\"primary\"}\r\n            onClick={() => { dispatch(boardSlice.actions.nextTurn()) }}\r\n          >\r\n            {'העבר תור'}\r\n          </Button>\r\n        </Grid>\r\n      </Grid >)\r\n  }\r\n}\r\n\r\nconst StepStepper = ({ state }: boardHeaderProps) => {\r\n    return (\r\n    <Grid container justify={'center'}>\r\n      <Grid item xs={12}>\r\n        <Stepper \r\n            activeStep={state.steps.length ?? 0}>\r\n            {Array.from(Array(state.codeNameNumber).keys()).map(i => {\r\n              const stepLable = i >= state.steps.length ? '' : state.steps[i].word\r\n              const stepError = i < state.steps.length && !state.steps[i].success\r\n              return (\r\n              <Step key={i}>\r\n                <StepLabel error={stepError}>\r\n                  {stepLable}\r\n                </StepLabel>\r\n              </Step>)\r\n            })}\r\n          </Stepper>\r\n      </Grid>)\r\n    </Grid>)\r\n}\r\n\r\n\r\n\r\nconst ErrorHeader = ({ state }: boardHeaderProps) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Card style={{\r\n      backgroundColor: '#d07777',\r\n      color: 'white'\r\n    }}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color={\"secondary\"}\r\n        onClick={() => { dispatch(createBoardCodeWordThunk(state!)) }}>\r\n        {'שגיאת שרת. אנא נסה שנית'}\r\n      </Button>\r\n    </Card>)\r\n}\r\n\r\nconst TurnEnd = ({ state }: boardHeaderProps) => {\r\n  const dispatch = useDispatch()\r\n  const successSteps = state.steps.filter(s => s.success).length\r\n  return (\r\n    <Grid container justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={2}\r\n      style={{\r\n        backgroundColor: Colors.Beige,\r\n        color: 'Black',\r\n      }}>\r\n      <Grid item>\r\n        <Typography variant=\"h4\">\r\n          {` ${state.codeNameWord} ${successSteps}/${state.codeNameNumber} `}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => { dispatch(boardSlice.actions.nextTurn()) }}\r\n        >\r\n          {` המשך `}\r\n        </Button>\r\n      </Grid>\r\n    </Grid>)\r\n}\r\n\r\nconst Header = ({ state, config }: boardHeaderProps) => {\r\n  if (state.requestFailed) {\r\n    return <ErrorHeader state={state} />\r\n  } else if (state.isTurnEnd) {\r\n    return <TurnEnd state={state} />\r\n  } else if (config?.gameType == GAME_TYPE_OPERATOR) {\r\n    return <OperatorHeader state={state} />\r\n  } else {\r\n    return (<PlayerHeader state={state} />)\r\n  }\r\n}\r\n\r\nconst SuccessSnackBar = ({ state, openSnackBar, setSnackBarOpen }: boardHeaderProps) => {\r\n\r\n  const lastStepSuccess = state.steps.length > 0 ? state.steps[state.steps.length - 1]?.success : undefined;\r\n  if (lastStepSuccess == undefined) {\r\n    return <Box />\r\n  } else {\r\n    return (\r\n      <Snackbar\r\n        autoHideDuration={4000}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n\r\n        }}\r\n\r\n\r\n        open={openSnackBar}\r\n        onClose={() => setSnackBarOpen!(false)}\r\n      >\r\n        <Card\r\n          style={{\r\n            backgroundColor: lastStepSuccess ? 'Green' : 'Red',\r\n            opacity: 0.8\r\n          }}\r\n        >\r\n          <Typography variant={\"h5\"}\r\n            style={{\r\n              margin: '0.5rem'\r\n            }}>\r\n            {lastStepSuccess ? 'מעולה!' : 'לא לזה התכוונתי..'}\r\n          </Typography>\r\n        </Card>\r\n      </Snackbar>\r\n    )\r\n  }\r\n}\r\n\r\nconst PossibleEndDialog = ({ state, config }: boardHeaderProps) => {\r\n  const dispatch = useDispatch();\r\n  if (!state.endGame) {\r\n    return <Box></Box>\r\n  } else {\r\n    const winner = state.endGameCause === \"BlackCard\" ? getOtherColor(state.playingColor) : state.playingColor;\r\n    return (\r\n      <Dialog\r\n        open={true}\r\n        //onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"סוף המשחק\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n          {winner === Colors.Red ? 'אדום' : 'כחול'} {' והמנצח הוא '}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => {\r\n              const newBoard = InitBoard(config!.gameType);\r\n              dispatch(boardSlice.actions.initBoard(newBoard)\r\n              )\r\n            }}\r\n            color=\"primary\" autoFocus >\r\n            {`משחק חדש`}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst checkGameEnd = (state: BoardState,dispatch:any)=>{\r\n  const cardsEnd = state.cards.length > 0 && state.cards.filter(c=>c.color === state.playingColor && !c.isLineThrough).length == 0\r\n  if(cardsEnd){\r\n    dispatch(boardSlice.actions.endGame(EndGameCause.AllCardsTurned));\r\n  }\r\n\r\n  if(state.cards.filter(c=>c.color === Colors.Black && c.isLineThrough).length > 0){\r\n      dispatch(boardSlice.actions.endGame(EndGameCause.BlackCard));\r\n  }\r\n}\r\n\r\nconst Board = () => {\r\n  const state = useSelector((s: StateStore) => s.board)\r\n  const config = useSelector((s: StateStore) => s.config)\r\n  const dispatch = useDispatch()\r\n  const [openSnackBar, setSnackBarOpen] = React.useState(true);\r\n  const titleStyle: CSSProperties = {\r\n    backgroundColor: state?.playingColor ?? Colors.Beige,\r\n    color: 'white'\r\n  };\r\n\r\n  if (state) {\r\n    if (state.cards.length > 0 && state.codeNameWord === \"\" && !state.requestFailed && !state.requestPending && !state.requestSuccess) {\r\n      dispatch(createBoardCodeWordThunk(state!));\r\n    }\r\n\r\n    checkGameEnd(state,dispatch);\r\n    \r\n    return (\r\n      <Container style={boardStyle}>\r\n        <PossibleEndDialog state={state} config={config!} />\r\n        <Card style={titleStyle}>\r\n          <ScoreHeader state={state} />\r\n          <Header state={state} config={config} />\r\n        </Card>\r\n        <SuccessSnackBar\r\n          state={state}\r\n          openSnackBar={openSnackBar}\r\n          setSnackBarOpen={setSnackBarOpen} />\r\n        {chunk(state.cards, 5).map((row, i) =>\r\n          <Grid container direction='row' justify='space-evenly' wrap='nowrap' key={i}>\r\n            {row.map((c, j) => {\r\n              {\r\n                const idx = i * 5 + j\r\n                return <GameCard\r\n                  key={idx}\r\n                  state={c}\r\n                  onClick={() => {\r\n                    if (!state.isTurnEnd && state.requestSuccess) {\r\n                        setSnackBarOpen(true)\r\n                        dispatch(boardSlice.actions.flipCard(idx));\r\n                    }\r\n                  }\r\n                  }\r\n                />\r\n              }\r\n            })}\r\n          </Grid>\r\n        )}\r\n        <StepStepper state={state} />\r\n      </Container>\r\n    );\r\n  } else {\r\n    return <CircularProgress />\r\n  }\r\n}\r\n\r\nexport default Board;\r\n\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { StateStore } from './app/store';\r\nimport { connect } from 'react-redux';\r\nimport Board from './Board';\r\nimport { Grid, Paper, Box, AppBar, Toolbar, IconButton, Typography, Button } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst App = () => {\r\n  return (\r\n\r\n    <Box className=\"App\">\r\n      <header>\r\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\r\n        <meta\r\n          name=\"viewport\"\r\n          content=\"minimum-scale=1, initial-scale=1, width=device-width\"\r\n        />\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              { <MenuIcon /> }\r\n            </IconButton>\r\n            <Typography variant=\"h6\">\r\n              Codenames\r\n          </Typography>\r\n            {/* <Button color=\"inherit\">Login</Button> */}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </header >\r\n      <Paper elevation={3} style={{paddingTop:'10%',paddingBottom:'10%'}}>\r\n        <Grid container alignItems='center'>\r\n          <Board></Board>\r\n        </Grid>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { StateStore, GAME_TYPE_PLAYER, AppConfig } from \"./store\"\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { initialBoardState } from \"./boardSlices\"\r\n\r\nconst initailAppState: AppConfig = {\r\n        gameType:GAME_TYPE_PLAYER\r\n}\r\n\r\nexport const configSlice = createSlice({\r\n    name: 'app',\r\n    initialState: initailAppState,\r\n    reducers: {\r\n        setConfig: (state: AppConfig, action: PayloadAction<AppConfig>) => {\r\n            return {\r\n                ...action.payload\r\n            }\r\n        }\r\n    }\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createAction, combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport { InitBoard, createBoardCodeWordThunk } from './app/boardActions';\r\nimport {boardSlice } from './app/boardSlices';\r\n//import { GAME_TYPE_PLAYER } from './app/store';\r\nimport { configSlice } from './app/appSlices';\r\nimport { GetInitAppState as GetAppConfig } from './app/appActions';\r\n\r\nconst reducer = combineReducers({\r\n  board: boardSlice.reducer,\r\n  config: configSlice.reducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer:reducer\r\n})\r\n\r\nReactDOM.render(\r\n  \r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  \r\n  document.getElementById('root')\r\n);\r\n\r\nconst appConfig = GetAppConfig()\r\nstore.dispatch(configSlice.actions.setConfig(appConfig));\r\nconst board = InitBoard(appConfig.gameType)\r\nstore.dispatch(boardSlice.actions.initBoard(board));\r\n//store.dispatch(createBoardCodeWordThunk(board));\r\n//store.dispatch(createBoardCodeWordThunk(board));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { StateStore, AppConfig, GAME_TYPE_PLAYER, GAME_TYPE_OPERATOR } from \"./store\";\r\nimport { InitBoard } from \"./boardActions\";\r\n\r\nexport const GetInitAppState = ():AppConfig=>{\r\n        return {\r\n            gameType :GAME_TYPE_PLAYER\r\n        }\r\n    }\r\n"],"sourceRoot":""}